import Head from 'next/head'
import Image from 'next/image'
import { signIn, signOut, useSession } from 'next-auth/react'
import { useCallback, useState } from 'react'
import ReactTags, { Tag } from 'react-tag-autocomplete'
import debounce from 'lodash/debounce';
import { FaXbox, FaPlaystation, FaRegSave, FaDiscord } from 'react-icons/fa';
import { BsNintendoSwitch } from 'react-icons/bs';
import { GiComputerFan } from 'react-icons/gi';
import { MdLogout } from 'react-icons/md';
import { supabase } from '@/lib/supabaseClient';
import { getToken } from 'next-auth/jwt';
import { GetServerSideProps } from 'next';

interface Game { 
  created_at: string;
  name: string,
  discord_user_id: string;
  igdb_game_id: number;
}
interface Props {
  games: Game[],
  gamingPlatforms: {
    pc: boolean | null
    playstation: boolean | null
    switch: boolean | null
    xbox: boolean | null
  }
}

export const getServerSideProps: GetServerSideProps = async ({ req }) => {
  const token = await getToken({ req })
  let { data: games } = await supabase.from('games').select()
  let { data: gamingPlatforms } = await supabase.from('gaming_platforms').select().eq('discord_user_id', token?.sub).limit(1)
    .single()

  return {
    props: {
      games: games ?? [],
      gamingPlatforms
    } as Props,
  }
}

export default function Home({ gamingPlatforms, games }: Props) {
  const { data: session } = useSession()
  const [selectedGames, setSelectedGames] = useState<Tag[]>(games.map((game) => ({
    id: game.igdb_game_id,
    name: game.name,
  })))
  const [isInputBusy, setIsInputBusy] = useState(false)
  const [suggestions, setSuggestions] = useState<Tag[]>([])
  const [selectedGamingPlatforms, setSelectedGamingPlatforms] = useState({
    pc: gamingPlatforms?.pc ?? false,
    xbox: gamingPlatforms?.xbox ?? false,
    playstation: gamingPlatforms?.playstation ?? false,
    switch: gamingPlatforms?.switch ?? false,
  })

  const onDelete = useCallback((gameIndex: number) => {
    setSelectedGames(selectedGames.filter((_, i) => i !== gameIndex))
  }, [selectedGames])

  const onAddition = useCallback((newGame: Tag) => {
    setSelectedGames([...selectedGames, newGame])
  }, [selectedGames])

  const onInput = (query: string) => {
    if (!isInputBusy && query.length >= 2) {
      setIsInputBusy(true)

      return fetch(`/api/games?searchTerm=${query}`)
        .then((response) => response.json())
        .then((data: Tag[]) => {
          setIsInputBusy(false)
          if (data instanceof Array) {
            setSuggestions(data)
          }
        }).finally(() => setIsInputBusy(false))
    }
  }

  const debouncedOnInput = useCallback(debounce(onInput, 700), [selectedGames])

  const gamingPlatformButtonStyle = { padding: 4, display: 'flex', alignItems: 'center' }
  const selectedGamingPlatformButtonStyle = { backgroundColor: 'green', color: 'white' }

  return (
    <>
      <Head>
        <title>Gaming Planner</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main style={{ height: '100vh', padding: 8 }}>
        <div style={{ display: 'flex', justifyContent: 'flex-end', padding: 8 }}>
          {!!session?.user && <p style={{ display: 'flex', alignItems: 'center' }}>
            {!!session?.user?.image && <Image
              src={session?.user?.image}
              alt="User Avatar"
              width={24}
              height={24}
              priority
              style={{ borderRadius: '50%' }}
            />}
            <span style={{ marginLeft: 8, marginRight: 8 }}>{session?.user?.name}</span>
            <MdLogout onClick={() => signOut()} />
          </p>}
        </div>
        {session ? <>
          <div style={{ display: 'inline-flex', flexWrap: 'wrap', alignItems: 'center', flexDirection: 'row', gap: 12, marginBottom: 8 }}>
            Wybierz platformy:
            <button style={{ ...gamingPlatformButtonStyle, ...(selectedGamingPlatforms.pc ? selectedGamingPlatformButtonStyle : {}) }} onClick={() => setSelectedGamingPlatforms(prevState => ({ ...prevState, pc: !prevState.pc }))}><GiComputerFan />&nbsp;PC</button>
            <button style={{ ...gamingPlatformButtonStyle, ...(selectedGamingPlatforms.xbox ? selectedGamingPlatformButtonStyle : {}) }} onClick={() => setSelectedGamingPlatforms(prevState => ({ ...prevState, xbox: !prevState.xbox }))}><FaXbox />&nbsp;Xbox</button>
            <button style={{ ...gamingPlatformButtonStyle, ...(selectedGamingPlatforms.playstation ? selectedGamingPlatformButtonStyle : {}) }} onClick={() => setSelectedGamingPlatforms(prevState => ({ ...prevState, playstation: !prevState.playstation }))}><FaPlaystation />&nbsp;PS</button>
            <button style={{ ...gamingPlatformButtonStyle, ...(selectedGamingPlatforms.switch ? selectedGamingPlatformButtonStyle : {}) }} onClick={() => setSelectedGamingPlatforms(prevState => ({ ...prevState, switch: !prevState.switch }))}><BsNintendoSwitch />&nbsp;Switch</button>
          </div>
          <span>
            <ReactTags
              tags={selectedGames}
              maxSuggestionsLength={15}
              suggestions={suggestions}
              onDelete={onDelete}
              onAddition={onAddition}
              allowBackspace={false}
              suggestionsFilter={() => true}
              onInput={debouncedOnInput}
              placeholderText="Wpisz nazwę gry, która cię interesuje"
            />
            {isInputBusy && <p>Wczytywanie...</p>}
          </span>
          <div style={{ display: 'flex', justifyContent: 'center', marginTop: 8 }}>
            <button style={{ padding: 4, display: 'flex', alignItems: 'center' }} onClick={() => {
              return fetch(`/api/save`, {
                method: "POST",
                headers: {
                  'Accept': 'application/json',
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                  selectedGamingPlatforms,
                  selectedGames
                })
              })
                .then((response) => response.json())
                .then((data) => {
                  console.log('data', data)
                })
                .catch((error) => {
                  console.error("Error:", error);
                });

            }}><FaRegSave />&nbsp;Zapisz</button>
          </div>
        </>
          :
          <div>
            <div style={{ display: 'flex', justifyContent: 'center', marginTop: 8 }}>
              <button style={{ padding: 4, display: 'flex', alignItems: 'center' }} onClick={() => signIn('discord')}><FaDiscord />&nbsp;Zaloguj się</button>
            </div>
          </div>}
      </main>
    </>
  )
}
